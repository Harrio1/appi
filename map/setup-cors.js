#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const os = require('os');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–æ–≤
function getIpAddresses() {
  const interfaces = os.networkInterfaces();
  const addresses = [];
  
  Object.keys(interfaces).forEach(iface => {
    interfaces[iface].forEach(details => {
      if (details.family === 'IPv4' && !details.internal) {
        addresses.push(details.address);
      }
    });
  });
  
  return addresses;
}

// –ó–∞–ø—Ä–æ—Å IP-–∞–¥—Ä–µ—Å–∞
async function promptForIp(message, defaultValue) {
  return new Promise((resolve) => {
    rl.question(`${message} [${defaultValue}]: `, (answer) => {
      resolve(answer.trim() || defaultValue);
    });
  });
}

// –ó–∞–ø—Ä–æ—Å –ø–æ—Ä—Ç–∞
async function promptForPort(message, defaultValue) {
  return new Promise((resolve) => {
    rl.question(`${message} [${defaultValue}]: `, (answer) => {
      resolve(answer.trim() || defaultValue);
    });
  });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ mobile-server.js
function updateServerFile(serverIp, mobileIp, serverPort) {
  const serverFilePath = path.join(__dirname, 'mobile-server.js');
  let serverFileContent = fs.readFileSync(serverFilePath, 'utf8');
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CORS –æ–ø—Ü–∏–π
  const corsOptionsRegex = /const corsOptions = \{[\s\S]*?\};/;
  const newCorsOptions = `const corsOptions = {
  origin: ['http://${mobileIp}:3000', 'http://localhost:3000'], // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –∏–∑ —ç—Ç–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Accept', 'Authorization', 'X-Requested-With', 'Cache-Control'],
  credentials: true
};`;
  
  serverFileContent = serverFileContent.replace(corsOptionsRegex, newCorsOptions);
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ app.listen
  const listenRegex = /app\.listen\(.*?\);/s;
  const newListen = `app.listen(PORT, '${serverIp}', () => {
  console.log(\`–ú–æ–±–∏–ª—å–Ω—ã–π API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É \${PORT}\`);
  console.log(\`–î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://${serverIp}:\${PORT}\`);
  console.log(\`–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç: http://${serverIp}:\${PORT}/api/health\`);
});`;
  
  serverFileContent = serverFileContent.replace(listenRegex, newListen);
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞
  const portRegex = /const PORT = \d+;/;
  const newPort = `const PORT = ${serverPort};`;
  
  serverFileContent = serverFileContent.replace(portRegex, newPort);
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  fs.writeFileSync(serverFilePath, serverFileContent);
  console.log(`‚úÖ –§–∞–π–ª mobile-server.js –æ–±–Ω–æ–≤–ª–µ–Ω`);
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∑–∞–ø—É—Å–∫–∞
function createStartScript(serverIp, serverPort) {
  // –°–æ–∑–¥–∞–Ω–∏–µ bat —Ñ–∞–π–ª–∞
  const batContent = `@echo off
echo –ó–∞–ø—É—Å–∫ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ IP ${serverIp}:${serverPort}
node mobile-server.js
pause
`;
  fs.writeFileSync(path.join(__dirname, `start-mobile-${serverIp}.bat`), batContent);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª start-mobile-${serverIp}.bat`);
  
  // –°–æ–∑–¥–∞–Ω–∏–µ PowerShell —Ñ–∞–π–ª–∞
  const psContent = `# –ó–∞–ø—É—Å–∫ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ IP ${serverIp}:${serverPort}
Write-Host "–ó–∞–ø—É—Å–∫ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ IP ${serverIp}:${serverPort}" -ForegroundColor Green
node mobile-server.js
Read-Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞"
`;
  fs.writeFileSync(path.join(__dirname, `start-mobile-${serverIp}.ps1`), psContent);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª start-mobile-${serverIp}.ps1`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üõ†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –∏ IP –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞');
  console.log('---------------------------------------------------');
  
  const ipAddresses = getIpAddresses();
  console.log('üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞ –Ω–∞ —ç—Ç–æ–π –º–∞—à–∏–Ω–µ:');
  ipAddresses.forEach((ip, index) => {
    console.log(`   ${index + 1}. ${ip}`);
  });
  
  const defaultServerIp = ipAddresses[0] || '192.168.58.253';
  const serverIp = await promptForIp('–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞', defaultServerIp);
  
  const mobileIp = await promptForIp('–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞', serverIp);
  
  const serverPort = await promptForPort('–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞', '8000');
  
  console.log('\nüìù –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:');
  console.log(`   ‚û°Ô∏è IP —Å–µ—Ä–≤–µ—Ä–∞: ${serverIp}`);
  console.log(`   ‚û°Ô∏è IP –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞: ${mobileIp}`);
  console.log(`   ‚û°Ô∏è –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${serverPort}`);
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  updateServerFile(serverIp, mobileIp, serverPort);
  createStartScript(serverIp, serverPort);
  
  console.log('\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log(`–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: node start-mobile-${serverIp}.bat`);
  
  rl.close();
}

main().catch(console.error); 