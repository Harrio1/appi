#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const os = require('os');
const readline = require('readline');
const { exec } = require('child_process');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–æ–≤
function getIpAddresses() {
  const interfaces = os.networkInterfaces();
  const addresses = [];
  
  Object.keys(interfaces).forEach(iface => {
    interfaces[iface].forEach(details => {
      if (details.family === 'IPv4' && !details.internal) {
        addresses.push(details.address);
      }
    });
  });
  
  return addresses;
}

// –ó–∞–ø—Ä–æ—Å IP-–∞–¥—Ä–µ—Å–∞
async function promptForIp(message, defaultValue) {
  return new Promise((resolve) => {
    rl.question(`${message} [${defaultValue}]: `, (answer) => {
      resolve(answer.trim() || defaultValue);
    });
  });
}

// –ó–∞–ø—Ä–æ—Å –ø–æ—Ä—Ç–∞
async function promptForPort(message, defaultValue) {
  return new Promise((resolve) => {
    rl.question(`${message} [${defaultValue}]: `, (answer) => {
      resolve(answer.trim() || defaultValue);
    });
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function createEnvFile(serverIp, serverPort, appFolder) {
  try {
    const envContent = `REACT_APP_API_URL=http://${serverIp}:${serverPort}
REACT_APP_API_TIMEOUT=10000
REACT_APP_DEBUG=true
REACT_APP_MOCK_DATA=false`;

    const envPath = path.join(appFolder, '.env.local');
    fs.writeFileSync(envPath, envContent);
    console.log(`‚úÖ –§–∞–π–ª .env.local —Å–æ–∑–¥–∞–Ω –≤ ${envPath}`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ .env —Ñ–∞–π–ª–∞: ${error.message}`);
    return false;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∑–∞–ø—É—Å–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º IP
function createStartScript(mobileIp, mobilePort, appFolder) {
  try {
    const batContent = `@echo off
echo –ó–∞–ø—É—Å–∫ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ IP ${mobileIp}:${mobilePort}
SET HOST=${mobileIp}
SET PORT=${mobilePort}
cd "${appFolder}"
npm start
pause
`;
    const batPath = path.join(appFolder, `start-${mobileIp}.bat`);
    fs.writeFileSync(batPath, batContent);
    console.log(`‚úÖ –§–∞–π–ª –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω: ${batPath}`);

    const psContent = `# –ó–∞–ø—É—Å–∫ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ IP ${mobileIp}:${mobilePort}
Write-Host "–ó–∞–ø—É—Å–∫ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ IP ${mobileIp}:${mobilePort}" -ForegroundColor Green
$env:HOST="${mobileIp}"
$env:PORT="${mobilePort}"
Set-Location "${appFolder.replace(/\\/g, '\\\\')}"
npm start
`;
    const psPath = path.join(appFolder, `start-${mobileIp}.ps1`);
    fs.writeFileSync(psPath, psContent);
    console.log(`‚úÖ PowerShell —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: ${psPath}`);

    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞: ${error.message}`);
    return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è axios –≤ package.json –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ API URL
function setupApiConfig(serverIp, serverPort, appFolder) {
  try {
    // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ API (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ src/api/config.js –∏–ª–∏ –ø–æ–¥–æ–±–Ω–æ–º –º–µ—Å—Ç–µ)
    const possibleConfigPaths = [
      path.join(appFolder, 'src', 'api', 'config.js'),
      path.join(appFolder, 'src', 'config', 'api.js'),
      path.join(appFolder, 'src', 'services', 'api.js'),
      path.join(appFolder, 'src', 'utils', 'api.js')
    ];

    let configFilePath = null;
    for (const filePath of possibleConfigPaths) {
      if (fs.existsSync(filePath)) {
        configFilePath = filePath;
        break;
      }
    }

    if (!configFilePath) {
      console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API. –°–æ–∑–¥–∞–¥–∏–º –µ–≥–æ...');
      configFilePath = path.join(appFolder, 'src', 'api', 'config.js');
      
      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const apiDir = path.dirname(configFilePath);
      if (!fs.existsSync(apiDir)) {
        fs.mkdirSync(apiDir, { recursive: true });
      }
      
      const configContent = `// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API
import axios from 'axios';

const API_URL = process.env.REACT_APP_API_URL || 'http://${serverIp}:${serverPort}';
const API_TIMEOUT = parseInt(process.env.REACT_APP_API_TIMEOUT || '10000', 10);

const api = axios.create({
  baseURL: API_URL,
  timeout: API_TIMEOUT,
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  }
});

export default api;
`;
      fs.writeFileSync(configFilePath, configContent);
      console.log(`‚úÖ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API —Å–æ–∑–¥–∞–Ω: ${configFilePath}`);
    } else {
      console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API: ${configFilePath}`);
      let configContent = fs.readFileSync(configFilePath, 'utf8');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º URL API –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      configContent = configContent.replace(
        /const API_URL\s*=\s*[^;]+;/,
        `const API_URL = process.env.REACT_APP_API_URL || 'http://${serverIp}:${serverPort}';`
      );
      
      fs.writeFileSync(configFilePath, configContent);
      console.log(`‚úÖ URL API –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`);
    }
    
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API: ${error.message}`);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üõ†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞');
  console.log('--------------------------------');
  
  const ipAddresses = getIpAddresses();
  console.log('üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞ –Ω–∞ —ç—Ç–æ–π –º–∞—à–∏–Ω–µ:');
  ipAddresses.forEach((ip, index) => {
    console.log(`   ${index + 1}. ${ip}`);
  });
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –º–æ–±–∏–ª—å–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
  const workspacePath = process.cwd();
  let mobileAppPath = path.join(workspacePath, '..', 'mobile-app');
  
  if (!fs.existsSync(mobileAppPath)) {
    mobileAppPath = path.join(workspacePath, 'mobile-app');
    
    if (!fs.existsSync(mobileAppPath)) {
      mobileAppPath = await new Promise((resolve) => {
        rl.question('–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ', (answer) => {
          resolve(answer.trim());
        });
      });
      
      if (!fs.existsSync(mobileAppPath)) {
        console.error(`‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${mobileAppPath}`);
        rl.close();
        return;
      }
    }
  }
  
  console.log(`üìÅ –ü–∞–ø–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${mobileAppPath}`);
  
  // –ó–∞–ø—Ä–æ—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const defaultServerIp = ipAddresses[0] || '192.168.58.253';
  const serverIp = await promptForIp('–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞', defaultServerIp);
  const serverPort = await promptForPort('–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞', '8000');
  
  const mobileIp = await promptForIp('–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', defaultServerIp);
  const mobilePort = await promptForPort('–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', '3000');
  
  console.log('\nüìù –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:');
  console.log(`   ‚û°Ô∏è IP —Å–µ—Ä–≤–µ—Ä–∞: ${serverIp}:${serverPort}`);
  console.log(`   ‚û°Ô∏è IP –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${mobileIp}:${mobilePort}`);
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  createEnvFile(serverIp, serverPort, mobileAppPath);
  setupApiConfig(serverIp, serverPort, mobileAppPath);
  createStartScript(mobileIp, mobilePort, mobileAppPath);
  
  console.log('\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log(`–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ${path.join(mobileAppPath, `start-${mobileIp}.bat`)}`);
  
  // –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç —Å–µ–π—á–∞—Å
  rl.question('\n–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–µ–π—á–∞—Å? (y/n): ', (answer) => {
    if (answer.toLowerCase() === 'y') {
      console.log('–ó–∞–ø—É—Å–∫ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
      const scriptPath = path.join(mobileAppPath, `start-${mobileIp}.bat`);
      exec(`"${scriptPath}"`, (error, stdout, stderr) => {
        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: ${error.message}`);
          return;
        }
        if (stderr) {
          console.error(`‚ö†Ô∏è –í—ã–≤–æ–¥ –æ—à–∏–±–æ–∫: ${stderr}`);
        }
        console.log(`üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ: ${stdout}`);
      });
    } else {
      console.log('–ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é –ø–æ–∑–∂–µ.');
    }
    rl.close();
  });
}

main().catch(console.error); 